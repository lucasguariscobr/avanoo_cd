definitions:
  deploy.Build:
    properties:
      branch:
        type: string
      date:
        type: string
      domains:
        items:
          type: string
        type: array
      id:
        type: string
      status:
        type: string
    type: object
  deploy.Domain:
    properties:
      branch:
        example: development
        type: string
      domain:
        example: pre.avanoo.com
        type: string
      extra_vars:
        additionalProperties:
          type: string
        type: object
      host:
        type: string
    type: object
  deploy.UpdateDomain:
    properties:
      branch:
        example: development
        type: string
      domain:
        example: pre.avanoo.com
        type: string
    type: object
  utils.JSONErrror:
    properties:
      msg:
        type: string
    type: object
host: cd.placeboapp.com
info:
  contact:
    email: lucas@avanoo.com
    name: Lucas
  description: Automating cd process.
  license:
    name: GNU GPLv3
  title: Avanoo Continuous Delivery
  version: "1.0"
paths:
  /builds:
    get:
      description: |-
        Returns the list of builds executed by the service.
        Only branches that are connected to a domain have their docker images generated.
        The build information is kept for one week.
      parameters:
      - description: Filter Builds
        enum:
        - queued
        - running
        - canceled
        - completed
        - successful
        - failed
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/deploy.Build'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.JSONErrror'
        "404": {}
        "405": {}
      summary: List all builds
      tags:
      - builds
  /domain:
    post:
      consumes:
      - application/json
      description: |-
        Creates or updates avanoo domains.
        When the domain already exists, its content will be replaced by the params provided on the request.
      parameters:
      - description: Domain
        in: body
        name: domain
        required: true
        schema:
          $ref: '#/definitions/deploy.Domain'
      produces:
      - application/json
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.JSONErrror'
        "404": {}
        "405": {}
      summary: Manage Avanoo Domains
      tags:
      - domains
  /domain/{domain}:
    delete:
      description: |-
        Delete an existing domain's definition.
        This operation does not stop the service or modifies the exisitng domain.
      parameters:
      - description: Name of the domain
        in: path
        name: domain
        required: true
        type: string
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.JSONErrror'
        "404": {}
        "405": {}
      summary: Delete an existing domain's definition
      tags:
      - domains
    get:
      description: Return attributes of an existing domain
      parameters:
      - description: Name of the domain
        in: path
        name: domain
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/deploy.Domain'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.JSONErrror'
        "404": {}
        "405": {}
      summary: Return attributes of an existing domain
      tags:
      - domains
  /domains:
    get:
      description: Return all domains and their parameters.
      produces:
      - application/json
      responses:
        "200":
          description: List of Domains
          schema:
            items:
              $ref: '#/definitions/deploy.Domain'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.JSONErrror'
        "404": {}
        "405": {}
      summary: List all domains
      tags:
      - domains
  /env:
    get:
      description: Download an .env file for your service
      parameters:
      - description: Service Name
        enum:
        - app
        in: query
        name: service
        required: true
        type: string
      - description: Environment Name
        enum:
        - development
        - test
        - stage
        - production
        in: query
        name: environment
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.JSONErrror'
        "404": {}
        "405": {}
      summary: Download .env file
      tags:
      - env
  /health:
    get:
      description: health check
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.JSONErrror'
        "404": {}
        "405": {}
      summary: Health check
      tags:
      - health
  /updateDomainBranch:
    post:
      consumes:
      - application/json
      description: |-
        Update the branch used by an existing domain.
        It will update the domain after receiving the new branch value.
      parameters:
      - description: Update Domain Info
        in: body
        name: domain
        required: true
        schema:
          $ref: '#/definitions/deploy.UpdateDomain'
      produces:
      - application/json
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.JSONErrror'
        "404": {}
        "405": {}
      summary: Update a Domain's branch
      tags:
      - domains
  /webhook:
    post:
      description: |-
        Webhook that communicates with Github.
        Currently listens to push events from the App repository.
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.JSONErrror'
        "404": {}
        "405": {}
      summary: GitHub integration
      tags:
      - webhook
swagger: "2.0"
